#A vector of needed packages ----
packages_to_install <- c("rhdf5", "tximport", "ensembldb", "EnsDb.Hsapiens.v86",
"biomaRt", "beepr")
#Load needed packages ----
for (package in packages_to_install){
library(package, character.only = TRUE)
}
library(datapasta)
library(datapasta)
library(tidyverse)
#Reading the study design ----
targets <- read_tsv("studydesign.txt")
path <- file.path(targets$sra_accession, "abundance.tsv")
#Get annotations ----
Tx <- transcripts(EnsDb.Hsapiens.v86, columns = c("tx_id", "gene_name"))
Tx <- as_tibble(Tx)
#Rename tx_id to target-id ----
Tx <- dplyr::rename(Tx, target_id = tx_id)
#Select target_id and gene_name columns ----
Tx <- dplyr::select(Tx, "target_id", "gene_name")
#Read kallisto data ----
Txi_gene <- tximport(path,
type = "kallisto",
tx2gene = Tx,
txOut = FALSE,
countsFromAbundance = "lengthScaledTPM",
ignoreTxVersion = TRUE
)
Txi_transcript <- tximport(path,
type = "kallisto",
tx2gene = Tx,
txOut = TRUE,
countsFromAbundance = "lengthScaledTPM",
ignoreTxVersion = TRUE)
#Load packages
packages_to_load <- c("tidyverse", "edgeR", "matrixStats", "cowplot")
# Assuming packages_to_load is a vector of package names
for (package in packages_to_load) {
if (!(package %in% installed.packages()[, "Package"])) {
tryCatch(
{
BiocManager::install(package)
},
error = function(e) {
cat("Error occurred while installing", package, ":", conditionMessage(e), "\n")
},
finally = {
}
)
}
# Load the package
library(package, character.only = TRUE)
}
myTPM <- Txi_gene$abundance
myCounts <- Txi_gene$counts
myTranscriptTPM <- Txi_transcript$abundance
colSums(myTPM)
colSums(myTranscriptTPM)
colSums(myCounts)
sampleLabels <- targets$sample
myTPM.stats <- transform(myTPM,
SD=rowSds(myTPM),
AVG=rowMeans(myTPM),
MED=rowMedians(myTPM)
)
head(myTPM.stats)
# ggplot ----
ggplot(myTPM.stats) +
aes(x = SD, y = MED) +
geom_point(shape=16, size=2) +
geom_hex(show.legend = FALSE) +
geom_smooth(method = lm) +
labs(
y="Median", x="Standard deviation",
title="Transcripts per million (TPM)",
subtitle = "unfiltered, non-normalized data",
caption = "Ge Odette 2023"
)
theme_classic() +
theme_dark() +
theme_bw()
#DGE LIST ----
myDGEList <- DGEList(myCounts)
save(myDGEList, file = "myDGEList")
load(file = myDGEList)
cpm <- cpm(myDGEList)
colSums(cpm)
log2.cpm <- cpm(myDGEList, log = TRUE)
log2.cpm.df <- as_tibble(log2.cpm, rownames = "geneID")
colnames(log2.cpm.df) <- c("geneID", sampleLabels)
log2.cpm.df.pivot <- pivot_longer(log2.cpm.df,
cols = HS01:CL13,
names_to = "samples",
values_to = "expression")
p1 <- ggplot(log2.cpm.df.pivot) + aes(x=samples, y=expression, fill=samples) +
geom_violin(trim = FALSE, show.legend = FALSE) +
stat_summary(fun = 'median',
geom = 'point',
shape = 95,
size = 10,
color = 'black') +
labs(y="log2 expression", x= "sample",
title = "log2 Counts per Million (cpm)",
subtitle = "unfiltered, non-normalized",
caption = paste0("prodiced on ", Sys.Date())) +
theme_bw()
table(rowSums(myDGEList$counts==0)==10)
keepers <- rowSums(cpm>1)>=5
myDGEList.filtered <- myDGEList[keepers,]
dim(myDGEList.filtered)
log2.cpm.filtered <- cpm(myDGEList.filtered, log = TRUE)
log2.cpm.filtered.df = as_tibble(log2.cpm.filtered, rownames = "geneID")
colnames(log2.cpm.filtered.df) <- c("geneID", sampleLabels)
log2.cpm.filtered.df.pivot <- pivot_longer(log2.cpm.filtered.df,
cols = HS01:CL13,
names_to = "samples",
values_to = "expression")
p2 <- ggplot(log2.cpm.filtered.df.pivot) +
aes(x=samples, y=expression, fill=samples) +
geom_violin(trim = FALSE, show.legend = FALSE) +
stat_summary(fun = 'median',
geom = 'point',
shape = 95,
size = 10,
color = 'black') +
labs(y="log2 expression", x= "sample",
title = "log2 Counts per Million (cpm)",
subtitle = "filtered, non-normalized",
caption = paste0("prodiced on ", Sys.Date())) +
theme_bw()
myDGEList.filtered.norm <- calcNormFactors(myDGEList.filtered, method = "TMM")
log2.cpm.filtered.norm <- cpm(myDGEList.filtered.norm, log =TRUE)
log2.cpm.filtered.norm.df <- as_tibble(log2.cpm.filtered.norm, rownames = "geneID")
colnames(log2.cpm.filtered.norm.df) <- c("geneID", sampleLabels)
log2.cpm.filtered.norm.df.pivot <- pivot_longer(log2.cpm.filtered.norm.df,
cols = HS01:CL13,
names_to = "samples",
values_to = "expression")
p3 <- ggplot(log2.cpm.filtered.norm.df.pivot) +
aes(x=samples, y=expression, fill=samples) +
geom_violin(trim = FALSE, show.legend = FALSE) +
stat_summary(fun = 'median',
geom = 'point',
shape = 95,
size = 10,
color = 'black') +
labs(y="log2 expression", x= "sample",
title = "log2 Counts per Million (cpm)",
subtitle = "filtered, TMM normalized",
caption = paste0("prodiced on ", Sys.Date())) +
theme_bw()
plot_grid(p1, p2, p3, labels = c("A", "B", "C"),label_size = 12)
p2
library(DT)
library(plotly)
library(gt)
?DT
??DT
install.packages("DT")
targets
group
group <- targets$group
group
group <- factor(group)
group
group <- factor(targets$group)
group
log2.cpm.filtered.norm.df
log2.cpm.filtered.norm
log2.cpm.filtered.norm
t(log2.cpm.filtered.norm)
distance <- dist(t(log2.cpm.filtered.norm), method = "maximum")
distance
clusters <- hclust(distance, method = "complete")
clusters
plot(clusters, labels = sampleLabels)
clusters <- hclust(distance, method = "average")
plot(clusters, labels = sampleLabels)
pca.res <- prcomp(t(log2.cpm.filtered.norm), scale. = F, retx = T)
View(pca.res)
ls(pca.res)
summary(pca.res)
pca.res$rotation
pca.res$x
screeplot(pca.res)
pca.var <- pca.res$sdev^2
pca.var
pc.per <- round(pc.var/sum(pca.var)*100, 1)
pc.var <- pca.res$sdev^2
pc.per <- round(pc.var/sum(pca.var)*100, 1)
pc.per
pca.res$x
library(DT)
library(plotly)
library(gt)
#Load packages
packages_to_load <- c("tidyverse", "edgeR", "matrixStats", "cowplot")
# Assuming packages_to_load is a vector of package names
for (package in packages_to_load) {
if (!(package %in% installed.packages()[, "Package"])) {
tryCatch(
{
BiocManager::install(package)
},
error = function(e) {
cat("Error occurred while installing", package, ":", conditionMessage(e), "\n")
},
finally = {
}
)
}
# Load the package
library(package, character.only = TRUE)
}
pca.res.df <- as_tibble(pca.res$x)
ggplot(pca.res.df) +
ggplot(pca.res.df) +
aes(x=PC1, y=PC2, label=sampleLabels) +
geom_point(size=4) +
xlab(paste0("PC1 (", pc.per[1], "%",")"))
pca.res.df <- as_tibble(pca.res$x)
ggplot(pca.res.df) +
aes(x=PC1, y=PC2, label=sampleLabels) +
geom_point(size=4) +
xlab(paste0("PC1 (", pc.per[1], "%",")"))
ggplot(pca.res.df) +
aes(x=PC1, y=PC2, label=sampleLabels) +
geom_point(size=4) +
xlab(paste0("PC1 (", pc.per[1], "%",")")) +
ylab(paste0("PC1 (", pc.per[2], "%",")")) +
title(title="PCA plot",
caption=paste0("produced on ", Sys.Date()))
ggplot(pca.res.df) +
aes(x=PC1, y=PC2, label=sampleLabels) +
geom_point(size=4) +
xlab(paste0("PC1 (", pc.per[1], "%",")")) +
ylab(paste0("PC1 (", pc.per[2], "%",")")) +
labs(title="PCA plot",
caption=paste0("produced on ", Sys.Date()))
ggplot(pca.res.df) +
aes(x=PC1, y=PC2, label=sampleLabels) +
geom_point(size=4) +
xlab(paste0("PC1 (", pc.per[1], "%",")")) +
ylab(paste0("PC1 (", pc.per[2], "%",")")) +
labs(title="PCA plot",
caption=paste0("produced on ", Sys.Date())) +
theme_bw()
ggplot(pca.res.df) +
aes(x=PC1, y=PC2, label=sampleLabels, color = group) +
geom_point(size=4) +
xlab(paste0("PC1 (", pc.per[1], "%",")")) +
ylab(paste0("PC1 (", pc.per[2], "%",")")) +
labs(title="PCA plot",
caption=paste0("produced on ", Sys.Date())) +
theme_bw()
ggplot(pca.res.df) +
aes(x=PC1, y=PC2, label=sampleLabels, color = group) +
geom_point(size=4) +
xlab(paste0("PC1 (", pc.per[1], "%",")")) +
ylab(paste0("PC2 (", pc.per[2], "%",")")) +
labs(title="PCA plot",
caption=paste0("produced on ", Sys.Date())) +
theme_bw()
ggplot(pca.res.df) +
aes(x=PC1, y=PC2, label=sampleLabels, color = group) +
geom_point(size=4) +
geom_label() +
xlab(paste0("PC1 (", pc.per[1], "%",")")) +
ylab(paste0("PC2 (", pc.per[2], "%",")")) +
labs(title="PCA plot",
caption=paste0("produced on ", Sys.Date())) +
theme_bw()
ggplot(pca.res.df) +
aes(x=PC1, y=PC2, label=sampleLabels, color = group) +
geom_point(size=4) +
#geom_label() +
xlab(paste0("PC1 (", pc.per[1], "%",")")) +
ylab(paste0("PC2 (", pc.per[2], "%",")")) +
labs(title="PCA plot",
caption=paste0("produced on ", Sys.Date())) +
theme_bw()
ggplot(pca.res.df) +
aes(x=PC1, y=PC2, label=sampleLabels, color = group) +
geom_point(size=4) +
#geom_label() +
xlab(paste0("PC1 (", pc.per[1], "%",")")) +
ylab(paste0("PC2 (", pc.per[2], "%",")")) +
labs(title="PCA plot",
caption=paste0("produced on ", Sys.Date())) +
coord_fixed() +
theme_bw()
ggplot(pca.res.df) +
aes(x=PC1, y=PC2, label=sampleLabels, color = group) +
geom_point(size=4) +
#geom_label() +
stat_ellipse() +
xlab(paste0("PC1 (", pc.per[1], "%",")")) +
ylab(paste0("PC2 (", pc.per[2], "%",")")) +
labs(title="PCA plot",
caption=paste0("produced on ", Sys.Date())) +
coord_fixed() +
theme_bw()
pca.res.df <- pca.res$x[,1:4] %>%
as_tibble() %>%
add_column(sample = sampleLabels, group = group)
pca.res.df
pca.pivot <- pca.res.df |> pivot_longer()
pca.pivot <- pca.res.df |> pivot_longer(cols = PC1:PC4,
names_to = "PC",
values_to = "Loadings")
pca.pivot
pca.pivot <- pca.res.df |> pivot_longer(cols = PC1:PC4,
names_to = "PC",
values_to = "oadings")
pca.pivot |> ggplot() +
aes(z=sample, y=loadings, fill = group) +
geom_bar(stat = "identity") +
facet_wrap(~PC)
pca.pivot <- pca.res.df |> pivot_longer(cols = PC1:PC4,
names_to = "PC",
values_to = "loadings")
pca.pivot |> ggplot() +
aes(z=sample, y=loadings, fill = group) +
geom_bar(stat = "identity") +
facet_wrap(~PC)
pca.pivot |> ggplot() +
aes(x=sample, y=loadings, fill = group) +
geom_bar(stat = "identity") +
facet_wrap(~PC)
pca.pivot |> ggplot() +
aes(x=sample, y=loadings, fill = group) +
geom_bar(stat = "identity") +
facet_wrap(~PC) +
labs(title = "PCA 'small multiples' plot",
caption = paste0("produced on ", Sys.Date())) +
theme_bw()
pca.pivot |> ggplot() +
aes(x=sample, y=loadings, fill = group) +
geom_bar(stat = "identity") +
facet_wrap(~PC) +
labs(title = "PCA 'small multiples' plot",
caption = paste0("produced on ", Sys.Date())) +
theme_bw() +
coord_flip()
